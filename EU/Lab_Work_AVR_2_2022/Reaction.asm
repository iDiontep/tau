;================================================================================================== 
; Реакция																						   
;================================================================================================== 
; Автор:				Цапенко А.В.															   
; Версия:				1.0																		   
; Дата:					30.03.2024																   
; Название:				Reaction.asm															   
; Микроконтроллер:		ATmega16																   
; Тактовая частота:		8 МГц 																	   
;==================================================================================================
																								   
;==================================================================================================  
; Назначение																					   
;================================================================================================== 
; 1) Формирование случайного интервала времени от 4.2 до 8.4 сек при нажатии кнопки "Готовность";  
; 2) Включение сигнального светодиода после истечения сформированного временного интервала;		   
; 3) Измерение времени реакции (время между включением светодиода и нажатием на кнопку "Реакция"); 
; 4) Вывод времени реакции от 000 до 999 мсек на 3 семисегментных индикатора;					   
; 5) Если время реакции превысило 999 мсек, то на индикаторы выводится "-HI";					   
; 6) Если кнопка "Реакция" нажата до включения светодиода, то на индикаторы выводится "bAd".	   
;================================================================================================== 
																								   
;================================================================================================== 
; Внешние устройства																			   
;================================================================================================== 
; 1) Кнопка "Готовность" подключена к PD1 (1 - кнопка отжата, 0 - кнопка нажата);				   
; 2) Кнопка "Реакция" подключена к PD2 (внешнее прерывание INT0 по спаду);						   
; 3) Семисегментные индикаторы: "Единицы", "Десятки", "Сотни" - подключены к пинам PC0-PC7: 	   
;    PC0-a, PC1-b, PC2-c, PC3-d, PC4-e, PC5-f, PC6-g, PC7-h;									   
; 4) Управляющий транзистор семисегментного индикатора "Единицы" подключен к PB0;				   
; 5) Управляющий транзистор семисегментного индикатора "Десятки" подключен к PB1;				   
; 6) Управляющий транзистор семисегментного индикатора "Сотни" подключен к PB2;					   
; 7) Сигнальный светодиод подключен к PB7.														   
;================================================================================================== 
																								   
;==================================================================================================  
; Задание																						   
;================================================================================================== 
; 1) Проверить работу программы в симуляторе;													   
; 2) Измерить в симуляторе время, в течение которого включён каждый семисегментный индикатор; 	   
; 3) Найти и исправить ошибку;																	   
; 4) Доработать программу, увеличив счетчик дисплея до 2-х байт;								   
; 5) Подобрать время включения индикатора, при котором глаз не воспринимает мигание индикаторов;   
; 6) Запрограммировать микроконтроллер стенда и проверить правильность его работы в 3-х режимах:   
;    - Нажать кнопку "Готовность", после включения светодиода нажать кнопку "Реакция";			   
;    - Нажать кнопку "Готовность", после включения светодиода не нажимать кнопку "Реакция";		   
;    - Нажать кнопку "Готовность", до включения светодиода нажать кнопку "Реакция".       		   
;================================================================================================== 
																								   
;================================================================================================== 
; Подключение файлов																			   
;==================================================================================================
.include "m16def.inc"					; Присоединение файла описаний							   
.list									; Включение листинга                                                                      
;================================================================================================== 
																								   
;==================================================================================================
; Регистры переменных																			   
;==================================================================================================
.def iterator               = R13       ; Регистр итераций										   
.def counterX				= R14		; Регистр счётчика временного интервала					   
.def random					= R15       ; Регистр случайного числа								   
.def tempL					= R16		; Младший оперативный регистр							   
.def tempH					= R17       ; Старший оперативный регистр							   
.def hundreds				= R18       ; Регистр сотен											   
.def tens					= R19		; Регистр десятков										   
.def ones					= R20		; Регистр единиц										   
.def flags					= R21       ; Регистр флагов										   
.def displayNumber			= R22		; Регистр номера включённого индикатора					   
.def displayCounter			= R23		; Регистр счётчика обновления дисплея					   
.def timeL					= R24		; Младший регистр времени реакции 						   
.def timeH					= R25		; Старший регистр времени реакции (счётчик переполнений)						   
.def tempOver               = R26       ; Оперативный регистр переполнения						   
;==================================================================================================
																								   
;==================================================================================================
; Константы																						   
;==================================================================================================
.equ KEY                    = PD1		; Бит кнопки "Готовность"									   
.equ LED                    = PB7       ; Бит сигнального светодиода									   
.equ BH						= PB2       ; Бит сотен - семисегментный индикатор "Сотни"						   
.equ BT						= PB1       ; Бит десятков - семисегментный индикатор "Десятки"					   
.equ BO						= PB0       ; Бит единиц - семисегментный индикатор "Единицы"					   
.equ FlagReady				= 0			; Бит флага "Готовность" (бит 0 в регистре flags)		   
.equ ValueDisplayCounter	= 50		; Величина счётчика обновления дисплея					   
.equ ValueCountIndicators   = 3			; Количество индикаторов								   
.equ ValuePointerIndicator  = 18		; Адрес регистра сотен									   
.equ ValueMaxTime           = 0x1F		; Максимальное число переполнений таймера-счётчика 0	   
.equ ValueBiasTime			= 0x84		; Величина временной добавки							   
.equ ValueShift             = 4			; Величина побитового сдвига влево						   
.equ ValueDiv				= 125 		; Величина деления										   
.equ ValueCenterRange       = 127       ; Величина центра интерва								   
.equ CodeB					= 10		; Адрес символа "b" в талице							   
.equ CodeA					= 11		; Адрес символа "A" в талице							   
.equ CodeD					= 12		; Адрес символа "d" в талице							   
.equ CodeDash				= 13 		; Адрес символа "-" в талице							   
.equ CodeH					= 14		; Адрес символа "H" в талице							   
.equ CodeI					= 15   		; Адрес символа "I" в талице							   
;==================================================================================================
																								   
;==================================================================================================
; Перевод отсчётов таймера-счётчика 0															   
;==================================================================================================
; 1) Частота 8 МГц = 8000000 Гц;																   
; 2) Предделитель таймера-счётчика 0 равен 1024;												   
; 3) Переполнение счётчика на каждом 256 счёте: Tmax = (256 * 1024 / 8000000) = 0.033 сек;
; 4) Количество переполнений для минимального интервала времени: Nmin = (4.2 / 0.033) = 127;
; 5) Количество переполнений для максимального интервала времени: Nmax = (8.4 / 0.033) = 255;  						   
; 6) Количество отсчётов счётчика за 1 мсек: X = 0.001 / [(1 / 8000000) * 1024] = 7.8125;		   
; 7) Перевод отсчётов в мсек: T = (Xобщ / X) = (Xобщ / 7.8125) = (0.128 * X) = (16 * X / 125);	   
; 8) Максимальное время, которое можно вывести на 3 семисегментных индикатора равно 999 мсек;	   
; 9) Максимальное количество отсчётов: Xmax = (999 * 7.8125) = 7804 = 0x1E7C = (0x1F00 - 0x0084).  
;==================================================================================================
																								   
;================================================================================================== 
; Инициализация																					   
;================================================================================================== 
.cseg							; Сегмент памяти программы										   
.org	$0000					; Вектор сброса по адресу 0										   
rjmp	Init                    ; Преход к подпрограмме инициализации							   
;==================================================================================================
																								   
;==================================================================================================
; Прерывания																					   
;==================================================================================================
.org	INT0addr				; $0002	Внешнее прерывание регистра 0							   
rjmp	KeyReaction				; Подпрограмма обработки нажатия на кнопку "Реакция"			   
																								   
.org	INT1addr				; $0004	Внешнее прерывание регистра 1							   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OC2addr					; $0006	Совпадение по каналу таймера-счётчика 2					   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OVF2addr				; $0008	Таймер-счётчик 2 переполнен								   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    ICP1addr				; $000A	Захват события таймером-счётчиком 1						   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OC1Aaddr				; $000C	Совпадение по каналу A таймера-счётчика 1				   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OC1Baddr				; $000E	Совпадение по каналу B таймера-счётчика 1				   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OVF1addr				; $0010	Таймер-счётчик 1 переполнен								   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OVF0addr				; $0012	Таймер-счётчик 0 переполнен								   
rjmp    OverflowTimer			; Подпрограмма обработки переполнения таймера-счётчика 0		   
																								   
.org    SPIaddr					; $0014	Передача по последовательному интерфейсу завершена		   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    URXCaddr				; $0016	Приём по приёмо-передатчику выполнен					   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    UDREaddr				; $0018	Регистр данных приёма-передатчика пуст					   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    UTXCaddr				; $001A	Передача по приёмо-передатчику выполнена				   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    ADCCaddr				; $001C Аналогово-цифровое преобразование выполнено				   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    ERDYaddr				; $001E	Готовность энергонезависимой памяти						   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    ACIaddr					; $0020	Аналоговый компаратор									   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    TWIaddr					; $0022 Двухпроводной последовательный интерфейс				   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    INT2addr				; $0024 Внешнее прерывание регистра 2							   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    OC0addr					; $0026 Совпадение по каналу таймера-счётчика 0					   
reti							; У данного прерывания нет подпрограммы обработки				   
																								   
.org    SPMRaddr				; $0028 Готовность записи в память программ						   
reti							; У данного прерывания нет подпрограммы обработки				   
;==================================================================================================
																								   
;==================================================================================================
; Начало инициализации																			   
;================================================================================================== 
Init:																							   
																								   
;==================================================================================================
; Инициализация стека																			   
;================================================================================================== 
InitStack:  	  																				   
	ldi	   tempL, Low(RAMEND)	; Загрузка младшего байта адреса вершины стека 					   
	ldi    tempH, High(RAMEND)  ; Загрузка старшего байта адреса вершины стека					   
	out	   SPL, tempL           ; Инициализация младшего байта адреса вершины стека				   
	out    SPH, tempH           ; Инициализация старшего байта адреса вершины стека 			   
;==================================================================================================
																								   
;==================================================================================================
; Инициализация порта А																			   
;================================================================================================== 
InitPortA: 																						   
	ser    tempL				; (PA0-PA7) - выходы не используются              				   
	clr    tempH				; (PA0-PA7) - выходы имеют низкие уровни						   
	out    DDRA, tempL          ; Задание конфигурации пинов порта A (0 - вход, 1 - выход)         
	out    PortA, tempH         ; Задание уровней сигналов на выходах порта A (0 - LOW, 1 - HIGH)  
								; и подтягивающих резисторов для входов (0 - без R, 1 - c R)	   
;==================================================================================================
																								   
;================================================================================================== 
; Инициализация порта B																			   
;================================================================================================== 
InitPortB:   																					   
	ser	   tempL				; (PB0-PB2) - выходы на транзисторы, выход PB7 на светодиод,	   
								; выходы (PB3-PB6) не используются 								   
	ldi    tempH, (1 << BH)		; PB2 - выход включает семисегментный индикатор "Сотни",		   
								; (PB0-PB1, PB3-PB7) - выходы имеют низкие уровни           	   
	out    DDRB, tempL			; Задание конфигурации пинов порта B (0 - вход, 1 - выход)  	   
	out    PortB, tempH			; Задание уровней сигналов на выходах порта B (0 - LOW, 1 - HIGH)  
								; и подтягивающих резисторов для входов (0 - без R, 1 - c R)       
;==================================================================================================
																								   
;==================================================================================================
; Инициализация порта C																			   
;==================================================================================================
InitPortC:   																					   
	ser    tempL				; (PC0-PC7) - выходы на семисегментный индикатор           		   
	clr    tempH				; (PC0-PC7) - выходы имеют низкие уровни 						   
	out    DDRC, tempL 			; Задание конфигурации пинов порта С (0 - вход, 1 - выход)		   
	out    PortC, tempH   		; Задание уровней сигналов на выходах порта C (0 - LOW, 1 - HIGH)  
								; и подтягивающих резисторов для входов (0 - без R, 1 - c R)       
;================================================================================================== 
																								   
;==================================================================================================
; Инициализация порта D																			   
;==================================================================================================
InitPortD:   																					   
	ldi    tempL, 0b11111001    ; (PD1-PD2) - входы кнопок, (PD0, PD3-PD7) - выходы не используются
	ldi    tempH, 0b00000110	; (PD1-PD2) - входы с подтягивающими резисторами, 				   
								; (PD0, PD3-PD7) - выходы имеют низкие уровни 					   
	out    DDRD, tempL     		; Задание конфигурации пинов порта D (0 - вход, 1 - выход)     	   
	out    PortD, tempH         ; Задание уровней сигналов на выходах порта D (0 - LOW, 1 - HIGH)  
								; и подтягивающих резисторов для входов (0 - без R, 1 - c R)	   
;================================================================================================== 
																								   
;==================================================================================================
; Инициализация таймера-счётчика 0																   
;==================================================================================================
InitTimer0:  																					   
	ldi	   tempL, (1 << TOIE0)	; Установка флага разрешения прерывания по переполнению
								; таймера-счётчика 0															   
	out    TIMSK, tempL			; Разрешения прерывания по переполнению таймера-счётчика 0													   
;================================================================================================== 
																								   
;==================================================================================================
; Инициализация внешнего прерывания INT0														   
;==================================================================================================
InitINT0:																						   
    ldi    tempL, (1 << ISC01)  ; Установка флагов формирования прерывания по спаду ISC01=1 ISC00=0														   
	ldi    tempH, (1 << INT0)   ; Установка флага разрешения внешнего прерывания INT0														   
	out    MCUCR, tempL			; Формирование прерывания при спаде	INT0													   
	out    GICR, tempH			; Разрешения внешнего прерывания INT0														   
;================================================================================================== 
																								   
;==================================================================================================  
; Инициализация переменных																		   
;==================================================================================================  
InitVar: 																						   
	ldi    tempL, 1				; Загрузка в оперативный регист числа 1							   
	mov    random, tempL		; Загрузка в регистр случайного числа 1 	   
																				   
	clr    hundreds				; Сброс регистра сотен											   
    clr    tens					; Сброс регистра десятков										   
    clr    ones					; Сброс регистра единиц											   
	clr    flags				; Сброс регистра флагов											   
																								   
	ldi    displayCounter, ValueDisplayCounter  ; Загрузка значения счётчика обновления дисплея	   
	clr    displayNumber 						; Номер индикатора равен 0 - индикатор "Сотни"   	     
;================================================================================================== 
																								   
;==================================================================================================
; Конец инициализации																			   
;==================================================================================================
																								   
;==================================================================================================
; Начало цикла																					   
;==================================================================================================  
Start: 																							   
																								   
Update:  																						   
	rcall  DisplayUpdate		; Вызов подпрограммы обновления дисплея							   
																								   
UserIsNotReady:																					   
    sbrc   flags, FlagReady		; Если флаг готовности 0, то проверка нажатия кнопки "Готовность",
								; иначе переход к вызову подпрограммы обновления дисплея 		   
	rjmp   Update				; Переход к вызову подпрограммы обновления дисплея				   
																								   
KeyIsPress:																						   
	sbic   PinD, KEY			; Если кнопка "Готовность" нажата, то генерация интервала времени, 
								; иначе переход к вызову подпрограммы обновления дисплея 		   
	rjmp   Update				; Переход к вызову подпрограммы обновления дисплея				   
																								   
RandomGenerator:																				   
	rcall  Rand								; Вызов подпрограммы формирования случайного числа						   
    mov    tempL, random					; Загрузка в оперативный регистр случайного числа 
											; Формирование случайного интервала: 127 + random / 2  
    lsr    tempL							; Деление случайного числа на 2				   
	subi   tempL, -ValueCenterRange			; Добавление к результату деления 127						   
	mov    counterX, tempL					; Загрузка в регистр счёта временного интервала														   
																								   
TimerRun:	          																			   
    ldi    tempL, (1 << CS02)|(1 << CS00)	; Задание частоты предделителя 1024 таймера-счётчика 0		   
  	out    TCCR0, tempL                     ; Запуск таймера-счётчика 0										   
																								   
AllowOverFlowTimer:																				   
    ldi    tempL, (1 << TOV0)	; Сброс флага переполнения таймера-счётчика 0															   
	out    TIFR, tempL			; Разрешение входа в прерывание по переполнению	таймера-счётчика 0								   
																					   
AllowKeyReaction:																	   
	ldi    tempL, (1 << INTF0)	; Сброс флага внешнего прерывания INT0															   
    out    GIFR, tempL			; Разрешение входа в прерывание по спаду от INT0						   
																					   
InterruptsActivate:																	   
    sei							; Разрение прерываний											   
																					   
ClearVar:																			   
    clr    timeH				; Сброс старшего регистра времени реакции								   
    clr    hundreds				; Сброс регистра сотен												   
    clr    tens					; Сброс регистра десятков								   
    clr    ones					; Сброс регистра единиц									   
																					   
SetFlagReady:																		   
	set							; Задание бита T регистра статуса SREG																						   
    bld    flags, FlagReady		; Задание бита готовности в регистре флагов			   
																					   
End:																				   
	rjmp   Start				; Возвращение в начало цикла																				   
;==================================================================================================	   
; Конец цикла	   																				   
;==================================================================================================
																								   
;==================================================================================================	   
; Подпрограмма формирования случайного числа  														   
;================================================================================================== 
Rand:  																							   
	mov    tempL, random		; Загрузка текущего значения случайного числа
	lsl    tempL				; Умножение случайного числа на 2
	lsl    tempL 				; Умножение	удвоенного случайного числа на 2 		   																		   
    add    random, tempL		; Увеличение исходного случайного числа в 5 раз																	   
    inc    random				; Инкрементация случайного числа на 1																	   
	ret							; Выход из подпрограммы формирования случайных чисел				   
;==================================================================================================  
																								   
;==================================================================================================	   
; Подпрограмма обновления дисплея	   									   
;==================================================================================================  
DisplayUpdate:																					   
																								   
DisplayUpdateCounter:																			   
	dec   displayCounter		; Декрементация счётчика обновления дисплея на 1																	   
    brne  DisplayUpdateExit		; Если счётчик обновления дисплея не равен 0,
								; то выход из подпрограммы обновления дисплея,
								; иначе выбор следующего семисегментного индикатора														   
																								   
DisplayUpdateNumber:																			   
    ldi   displayCounter, ValueDisplayCounter	; Загрузка величины обновления дисплея       											   
    inc   displayNumber							; Инкрементация номера работающего индикатора на 1													   
	cpi   displayNumber, ValueCountIndicators	; Сравнение номера текущего индикатора 
												; и количества всех индикаторов													   
	brne  DisplayUpdateSelection				; Если номер индикатора равен количеству,
												; то сброс номера текущего индикатора																   
	clr   displayNumber							; Сброс номера текущего индикатора																				   
																								   
DisplayUpdateSelection: 																		   
	ldi   ZL, ValuePointerIndicator				; Загрузка младшего байта адреса регистра сотен																   
	ldi   ZH, 0									; Загрузка старшего байта адреса регистра сотен										   
    add   ZL, displayNumber						; Смещение загруженного адреса на номер индикатора																		   
	ld    tempL, Z								; Загрузка кода символа на текущем индикаторе																			   
																							   
DisplayUpdateLoad:										   
    ldi   ZL, Low(Table * 2)	; Загрузка младшего байта адреса начала таблицы 										   
 	ldi   ZH, High(Table * 2)	; Загрузка старшего байта адреса начала таблицы					   
	add   ZL, tempL				; Смещение младшего байта адреса на величину кода													   
	clr   tempL					; Сброс оперативного регистра																   
    adc   ZH, tempL				; Смещение старшего байта адреса на величину переноса																			   
	lpm   tempL, Z				; Загрузка в оперативный регистр семисегментного кода 							   
																					   
DisplayUpdateOutput:																   
	out   PortC, tempL			; Вывод семисегментного кода на индикатор											   
																								   
DisplayUpdateIndicator:																			   
    in    tempL, PinB							; Загрузка состояния пинов порта B 													   
	andi  tempL, (1 << BH)|(1 << BT)|(1 << BO)	; Маскирование битов индикаторов
	lsr   tempL									; Смещение бита текущего индикатора вправо																				   
	brcc  DisplayUpdateLED						; Если перенос не равен 0, то задание бита сотен 																		   
	ldi   tempL, (1 << BH)						; Задание бита сотен										   
																								   
DisplayUpdateLED:																				   
	in    tempH, PinB			; Загрузка состояния пинов порта B 																			   
	andi  tempH, (1 << LED)		; Маскирование бита сигнального светодиода   								   
																					   
DisplayUpdateChange:																   
	or    tempL, tempH			; Формирование нового состояния пинов порта B											   
	out   PortB, tempL			; Переключение индикатора																			   
		   																			   
DisplayUpdateExit: 																	   
	ret							; Выход из подпрограммы обновления дисплея																					   
;==================================================================================================
																								   
;==================================================================================================
; Подпрограмма перевода двоичного кода в семисегментный		   
;==================================================================================================
Convert:																						   
																								   
ConvertClear:																					   
    clr   hundreds				; Сброс регистра сотен																					   
	clr   tens  				; Сброс регистра десятков														   
	clr   ones					; Сброс регистра единиц															   
																					   
ConvertFindHundreds:																   
    subi  timeL, 100			; Вычитание 100 из младшего регистра временного интервала																				   
	sbci  timeH, 0				; Вычитание переноса из старшего регистра временного интервала 														   
	brcs  ConvertFindTens		; Если перенос не равен 0, то переход к поиску количества десятков,
								; иначе инкрементация количества сотен на 1															   
    inc   hundreds				; Инкрементация количества сотен на 1																		   
	rjmp  ConvertFindHundreds	; Продолжение поиска количества сотен													   
																						   
ConvertFindTens:   																	   
	subi  timeL, -100			; Увеличение младшего регистра временного интервала на 100																			   
    subi  timeL, 10				; Вычитание 10 из младшего регистра временного интервала													   
    brcs  ConvertFindOnes		; Если перенос не равен 0, то переход к поиску количества единиц,
								; иначе инкрементация количества десятков на 1								   
    inc   tens 					; Инкрементация количества десятков на 1														   
	rjmp  ConvertFindTens + 1	; Продолжение поиска количества десятков													   
																								   
ConvertFindOnes:   																				   
	subi  timeL, -10			; Увеличение младшего регистра временного интервала на 10																				   
    mov   ones, timeL			; Загрузка значения в регистр единиц 																	   
																								   
ConvertExit:																					   
    ret							; Выход из подпрограммы перевода двоичного кода в семисегментный																								   
;==================================================================================================																								 
																								   
;==================================================================================================
; Таблица перекодировки символов																   
;==================================================================================================
Table:    																						   
	.db	   0b00111111, 0b00000110		; Коды "0", "1"											   
    .db	   0b01011011, 0b01001111		; Коды "2", "3"											   
    .db	   0b01100110, 0b01101101		; Коды "4", "5"											   
	.db	   0b01111101, 0b00000111		; Коды "6", "7"											   
	.db	   0b01111111, 0b01101111		; Коды "8", "9"  										   
	.db	   0b01111100, 0b01110111		; Коды "b", "A"											   
	.db	   0b01011110, 0b01000000		; Коды "d", "-"											   
	.db	   0b01110110, 0b00110000		; Коды "H", "I"	 										   
;==================================================================================================
																								   
;==================================================================================================
; Подпрограмма обработки нажатия на кнопку "Реакция"										   
;==================================================================================================
KeyReaction:   																					   
	push   tempL				; Сохрание в Stack значения младшего оперативного регистра																			   
	push   tempH				; Сохрание в Stack значения старшего оперативного регистра																		   
    in     tempL, SREG			; Сохрание значения SREG в младший оперативный регистр																		   
	push   tempL 				; Сохрание значения SREG из младшего оперативного регистра в Stack																					   
																								   
KeyReactionTimerStop:																			   
    clr    tempL				; Сброс оперативного регистра																				   
	out    TCCR0, tempL			; Остановка таймера-счётчика 0												   
																								   
KeyReactionCheckLED:																			   
    sbis   PinB, LED			; Если сигнальный светодиод включён, то переход к подсчёту мсек,
								; иначе переход к загрузки кодов ошибки											   
    rjmp   KeyReactionCheat		; Переход к загрузка в регистры индикаторов кодов ошибки																		   
	rjmp   KeyReactionTime		; Переход к подсчёту мсек																			   
																								   
KeyReactionCheat:     																			   
	ldi    hundreds, CodeB		; Загрузка в регистр сотен кода символа "b"													   
    ldi    tens, CodeA			; Загрузка в регистр десятков кода символа "A"														   
    ldi    ones, CodeD			; Загрузка в регистр единиц кода символа "d"														   
    rjmp   KeyReactionClear		; Переход к очищению данных регистров флага и временного интервала																		   
																								   
KeyReactionTime:																				   
	in     timeL, TCNT0			; Загрузка значения регистра счёта таймера-счётчика 0																			   
	in     tempL, TIFR			; Загрузка значения регистра прерываний таймера-счётчика 0								   
    sbrc   tempL, OCF0			; Если перенос равен 1, то инкрементация счётчика переполнений на 1																			   
	inc    timeH				; Инкрементация счётчика переполнений на 1																					   
	subi   timeL, ValueBiasTime ; Вычитание величины временной добавки из временного интервала												   
	sbci   timeH, 0				; Вычитание переноса из счётчика переполнений																				   
																								   
KeyReactionInit:																				   
    ldi    tempL, ValueShift	; Загрузка в оперативный регистр числа битовых сдвигов влево	 																	   
    mov    iterator, tempL		; Загрузка в регистр итератор числа битовых сдвигов влево
	mov    tempL, timeL			; Загрузка в младший оперативный регистр значения
								; из младшего регистра временного интервала																			   
	mov    tempH, timeH			; Загрузка в старший оперативный регистр значения
								; из старшего регистра временного интервала								   
	clr    tempOver				; Сброс оперативного регистра переполнения																				   
																								   
KeyReactionShiftLeft:	   		; Умножение на 16 с помощью 4-х побитовых сдвигов влево																   
	lsl    tempL				; Сдвиг влево младшего оперативного регистра																					   
	rol    tempH				; Сдвиг влево старшего оперативного регистра с учётом переноса																					   
	rol    tempOver				; Сдвиг влево оперативного регистра переполнения с учётом переноса																				   
    dec    iterator				; Декрементация итератора на 1																				   
	brne   KeyReactionShiftLeft	; Если итератор не равен 0, то продолжать побитовый сдвиг влево	   																   
																								   
KeyReactionClearTime:																			   
    clr    timeL				; Сброс младшего регистра временного интервала																					   
	clr    timeH				; Сброс старшего регистра временного интервала																					   
																								   
KeyReactionDivision:  			; Деление на 125 с помощью операции вычитания																   
	subi   tempL, ValueDiv		; Вычитание из младшего оперативного регистра делителя										   
    sbci   tempH, 0				; Вычитание из старшего оперативного регистра переноса																				   
	sbci   tempOver, 0			; Вычитание из оперативного регистра переполнения переноса																					   
    brcs   KeyReactionConvert	; Если перенос равен 1, то перейти к переводу в семисегментный код,
								; иначе	инкрементация на 1 младшего регистра временного интервала																	   
	inc    timeL 				; Инкрементация на 1 младшего регистра временного интервала																				   
	brne   KeyReactionDivision	; Если инкрементированный регистр не равен 0, то повторить деление,
								; иначе инкрементация на 1 старшего регистра временного интервала																		   
	inc    timeH				; Инкрементация на 1 старшего регистра временного интервала																		   
	rjmp   KeyReactionDivision	; Переход к повторному делению																	   
																								   
KeyReactionConvert:																				   
    rcall  Convert				; Вызов подпрограммы перевода двоичного кода в семисегментный			   		   		    													   
		     																					   
KeyReactionClear:   																			   
	clt							; Сброс бита T регистра статуса SREG																						   
	bld    flags, FlagReady		; Сброс бита готовности в регистре флагов																		   
	clr    timeH				; Сброс счетчика переполнений								   
																								   
KeyReactionSwitchOffLED:																		   
	cbi    PortB, LED			; Выключение сигнального светодиода													   
																								   
KeyReactionExit:
	pop    tempL				; Загрузка значения SREG в младший оперативный регистр из Stack				
    out    SREG, tempL			; Загрузка значения SREG из младшего оперативного регистра		
	pop    tempH				; Загрузка из Stack значения старшего оперативного регистра;				
	pop    tempL				; Загрузка из Stack значения младшего оперативного регистра;																								   																		   
    ret							; Выход из подпрограмма обработки нажатия на кнопку "Реакция"
								; без разрешения глобального прерывания																			   
;==================================================================================================
																								   
;==================================================================================================
; Подпрограмма обработки переполнения таймера-счётчика 0										   
;==================================================================================================
OverflowTimer: 																					   
	push   tempL				; Сохрание в Stack значения младшего оперативного регистра																			   
	push   tempH				; Сохрание в Stack значения старшего оперативного регистра																		   
    in     tempL, SREG			; Сохрание значения SREG в младший оперативный регистр																		   
	push   tempL 				; Сохрание значения SREG из младшего оперативного регистра в Stack																					   
	  																							   
OverflowTimerCheckLED:         																	   
    sbic   PinB, LED			; Если светодиод выключен, то формирование временного интевала,
								; иначе подсчёт времени реакции											   
    rjmp   OverflowTimerCheck	; Переход к подсчёту времени реакции																	   
	
OverflowTimerDecrement:																							   
	dec    counterX				; Декрементация счётчика временного интервала																				   
	brne   OverflowTimerExitI	; Если значение счётчика не равно 0, то выход из подпрограммы
								; с разрешением	глобального прерывания																	   
																								   
OverflowTimerInit:   																			   
	ldi    tempL, ValueBiasTime	; Загрузка в оперативный регистр временной добавки 															   
	out    TCNT0, tempL			; Загрузка временной добавки в регистр счёта таймера-счётчика 0 																   
																								   
OverflowTimerSwitchOnLED:																		   
	sbi    PortB, LED			; Включение сигнального светодиода													   
																								   
OverflowTimerExitI:
	pop    tempL				; Загрузка значения SREG в младший оперативный регистр из Stack				
    out    SREG, tempL			; Загрузка значения SREG из младшего оперативного регистра		
	pop    tempH				; Загрузка из Stack значения старшего оперативного регистра;				
	pop    tempL				; Загрузка из Stack значения младшего оперативного регистра;																			   															   
    reti						; Выход из подпрограмма обработки нажатия на кнопку "Реакция"											   
								; с разрешением глобального прерывания
																															   
OverflowTimerCheck:     																	   
	inc    timeH				; Инкрементация счётчика переполнений									   
    cpi    timeH, ValueMaxTime	; Сравнение значения счётчика переполнений с максимумом						   
	brne   OverflowTimerExitI	; Если значение счётчика переполнения не равно максимому,
								; выход из подпрограммы с разрешением глобального прерывания																   
								; иначе загрузка в регистры индикаторов кодов превышения			   
																								   
OverflowTimerInitOutput:																		   
	ldi    hundreds, CodeDash	; Загрузка в регистр сотен кода символа "-"															   
	ldi    tens, CodeH			; Загрузка в регистр десятков кода символа "H"														   
	ldi    ones, CodeI			; Загрузка в регистр единиц кода символа "I"
	
OverflowTimerResetFlagReady:    																   
	clt							; Сброс бита T регистра статуса SREG											   
	bld    flags, FlagReady 	; Сброс бита готовности в регистре флагов															   
																								   
OverflowTimerStop:																				   
	clr    tempL				; Сброс оперативного регистра																	   
	out    TCCR0, tempL			; Остановка таймера-счётчика 0												   
																								   
OverflowTimerSwitchOffLED:																		   
	cbi    PortB, LED			; Выключение сигнального светодиода												   
																								   
OverflowTimerExit:
	pop    tempL				; Загрузка значения SREG в младший оперативный регистр из Stack				
    out    SREG, tempL			; Загрузка значения SREG из младшего оперативного регистра		
	pop    tempH				; Загрузка из Stack значения старшего оперативного регистра;				
	pop    tempL				; Загрузка из Stack значения младшего оперативного регистра;																				   						   
	ret							; Выход из подпрограмма обработки нажатия на кнопку "Реакция"
							   	; без разрешения глобального прерывания							
;==================================================================================================